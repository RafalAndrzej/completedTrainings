{"ast":null,"code":"var _jsxFileName = \"/Users/rafal/NaukaProgramowania/React/19SectionRouterV6/react-router-UpdateVersion/frontend/src/pages/NewEventPage.js\";\nimport { json } from 'react-router-dom';\nimport EventForm from '../components/EventForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewEventPage = () => {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 11\n  }, this);\n};\n_c = NewEventPage;\nexport default NewEventPage;\nexport async function action(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const data = await request.formData();\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  };\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not get event. ðŸ’¥'\n    }, {\n      status: 500\n    });\n  }\n  return response;\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["json","EventForm","NewEventPage","action","request","params","data","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","ok","message","status"],"sources":["/Users/rafal/NaukaProgramowania/React/19SectionRouterV6/react-router-UpdateVersion/frontend/src/pages/NewEventPage.js"],"sourcesContent":["import { json } from 'react-router-dom';\n\nimport EventForm from '../components/EventForm';\n\nconst NewEventPage = () => {\n   return <EventForm />;\n};\n\nexport default NewEventPage;\n\nexport async function action({ request, params }) {\n   const data = await request.formData();\n\n   const eventData = {\n      title: data.get('title'),\n      image: data.get('image'),\n      date: data.get('date'),\n      description: data.get('description'),\n   };\n\n   const response = await fetch('http://localhost:8080/events', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(eventData),\n   });\n\n   if (!response.ok) {\n      throw json({ message: 'Could not get event. ðŸ’¥' }, { status: 500 });\n   }\n   return response;\n}\n"],"mappings":";AAAA,SAASA,IAAI,QAAQ,kBAAkB;AAEvC,OAAOC,SAAS,MAAM,yBAAyB;AAAC;AAEhD,MAAMC,YAAY,GAAG,MAAM;EACxB,oBAAO,QAAC,SAAS;IAAA;IAAA;IAAA;EAAA,QAAG;AACvB,CAAC;AAAC,KAFIA,YAAY;AAIlB,eAAeA,YAAY;AAE3B,OAAO,eAAeC,MAAM,OAAsB;EAAA,IAArB;IAAEC,OAAO;IAAEC;EAAO,CAAC;EAC7C,MAAMC,IAAI,GAAG,MAAMF,OAAO,CAACG,QAAQ,EAAE;EAErC,MAAMC,SAAS,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACtC,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IAC1DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EACjC,CAAC,CAAC;EAEF,IAAI,CAACM,QAAQ,CAACO,EAAE,EAAE;IACf,MAAMrB,IAAI,CAAC;MAAEsB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACtE;EACA,OAAOT,QAAQ;AAClB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}