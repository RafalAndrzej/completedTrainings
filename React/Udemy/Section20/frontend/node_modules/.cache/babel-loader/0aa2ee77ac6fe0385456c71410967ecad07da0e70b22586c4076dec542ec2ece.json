{"ast":null,"code":"var _jsxFileName = \"/Users/rafal/NaukaProgramowania/React/19SectionRouterV6/react-router-UpdateVersion/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: data.events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 11\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events ' };\n    // throw new Response(JSON.stringify({ message: 'Could nod fetch events' }), { status: 500 });\n    return json({\n      message: 'Could nod fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","EventsPage","data","events","loadEvents","response","fetch","ok","message","status","loader"],"sources":["/Users/rafal/NaukaProgramowania/React/19SectionRouterV6/react-router-UpdateVersion/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n   const data = useLoaderData();\n\n   return <Await resolve={data.events}></Await>;\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n   const response = await fetch('http://localhost:8080/events');\n\n   if (!response.ok) {\n      // return { isError: true, message: 'Could not fetch events ' };\n      // throw new Response(JSON.stringify({ message: 'Could nod fetch events' }), { status: 500 });\n      return json({ message: 'Could nod fetch events' }, { status: 500 });\n   } else {\n      return response;\n   }\n}\n\nexport function loader() {\n   return defer({\n      events: loadEvents(),\n   });\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC;AAElD,SAASC,UAAU,GAAG;EAAA;EACnB,MAAMC,IAAI,GAAGN,aAAa,EAAE;EAE5B,oBAAO,QAAC,KAAK;IAAC,OAAO,EAAEM,IAAI,CAACC;EAAO;IAAA;IAAA;IAAA;EAAA,QAAS;AAC/C;AAAC,GAJQF,UAAU;EAAA,QACHL,aAAa;AAAA;AAAA,KADpBK,UAAU;AAMnB,eAAeA,UAAU;AAEzB,eAAeG,UAAU,GAAG;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACf;IACA;IACA,OAAOV,IAAI,CAAC;MAAEW,OAAO,EAAE;IAAyB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACtE,CAAC,MAAM;IACJ,OAAOJ,QAAQ;EAClB;AACH;AAEA,OAAO,SAASK,MAAM,GAAG;EACtB,OAAOZ,KAAK,CAAC;IACVK,MAAM,EAAEC,UAAU;EACrB,CAAC,CAAC;AACL;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}