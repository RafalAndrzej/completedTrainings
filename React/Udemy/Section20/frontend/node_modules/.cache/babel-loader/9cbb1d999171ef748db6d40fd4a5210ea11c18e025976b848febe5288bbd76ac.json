{"ast":null,"code":"var _jsxFileName = \"/Users/rafal/NaukaProgramowania/React/19SectionRouterV6/react-router-UpdateVersion/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { Suspense } from 'react';\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 53\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 7\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events ' };\n    // throw new Response(JSON.stringify({ message: 'Could nod fetch events' }), { status: 500 });\n    return json({\n      message: 'Could nod fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Suspense","useLoaderData","json","defer","Await","EventsList","EventsPage","events","loadedEvents","loadEvents","response","fetch","ok","message","status","loader"],"sources":["/Users/rafal/NaukaProgramowania/React/19SectionRouterV6/react-router-UpdateVersion/frontend/src/pages/Events.js"],"sourcesContent":["import { Suspense } from 'react';\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n   const { events } = useLoaderData();\n\n   return (\n      <Suspense>\n         <Await resolve={events}>{(loadedEvents) => <EventsList events={loadedEvents} />}</Await>\n      </Suspense>\n   );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n   const response = await fetch('http://localhost:8080/events');\n\n   if (!response.ok) {\n      // return { isError: true, message: 'Could not fetch events ' };\n      // throw new Response(JSON.stringify({ message: 'Could nod fetch events' }), { status: 500 });\n      return json({ message: 'Could nod fetch events' }, { status: 500 });\n   } else {\n      return response;\n   }\n}\n\nexport function loader() {\n   return defer({\n      events: loadEvents(),\n   });\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC;AAElD,SAASC,UAAU,GAAG;EAAA;EACnB,MAAM;IAAEC;EAAO,CAAC,GAAGN,aAAa,EAAE;EAElC,oBACG,QAAC,QAAQ;IAAA,uBACN,QAAC,KAAK;MAAC,OAAO,EAAEM,MAAO;MAAA,UAAGC,YAAY,iBAAK,QAAC,UAAU;QAAC,MAAM,EAAEA;MAAa;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EAAS;IAAA;IAAA;IAAA;EAAA,QAChF;AAEjB;AAAC,GARQF,UAAU;EAAA,QACGL,aAAa;AAAA;AAAA,KAD1BK,UAAU;AAUnB,eAAeA,UAAU;AAEzB,eAAeG,UAAU,GAAG;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACf;IACA;IACA,OAAOV,IAAI,CAAC;MAAEW,OAAO,EAAE;IAAyB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACtE,CAAC,MAAM;IACJ,OAAOJ,QAAQ;EAClB;AACH;AAEA,OAAO,SAASK,MAAM,GAAG;EACtB,OAAOZ,KAAK,CAAC;IACVI,MAAM,EAAEE,UAAU;EACrB,CAAC,CAAC;AACL;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}